//
//  HomeInteractor.swift
//  ott
//
//  Created by dpsmac1 on 24-04-18.
//  Copyright (c) 2018 Digitalproserver. All rights reserved.
//
//  This file was generated by the üêç VIPER generator
//

import Foundation
import Alamofire
import SwiftyJSON

final class HomeInteractor {
    weak var presenter: HomePresenter!
}

// MARK: - Extensions -

extension HomeInteractor: HomeInteractorInterface {
    
    func fetchCategories() {
        let params: Parameters = [
            "user_token": Constants.API.userToken
        ]
        
        ApiClient.post("playlists/home.php", params: params, success: { response in
            do {
                let playlistsHome = try JSONDecoder().decode(PlaylistsHomeNode.self, from: response)
                self.presenter.successFetchingCategories(playlistsHome.home)
            } catch {
                self.presenter.failureFetchingCategories(error)
            }
        }) { error in
            print("[HomeInteractor] ERROR: \(String(describing: error))")
            self.presenter.failureFetchingCategories(error)
        }
    }
    
    func fetchHighlights() {
        let params: Parameters = [
            "user_token": Constants.API.userToken
        ]
        
        ApiClient.post("playlists/destacados.php", params: params, success: { response in
            do {
                let highlightsHome = try JSONDecoder().decode(HighlightsHomeNode.self, from: response)
                self.presenter.successFetchingHighlights(highlightsHome.highlights)
            } catch {
                self.presenter.failureFetchingCategories(error)
            }
        }) { error in
            print("[HomeInteractor] ERROR: \(String(describing: error))")
            self.presenter.failureFetchingCategories(error)
        }
    }
}




// MARK: - Response Models
extension HomeInteractor {
    struct PlaylistsHomeNode: Decodable {
        enum CodingKeys: String, CodingKey { case home }
        let home: [Category]
    }
    
    struct HighlightsHomeNode: Decodable {
        enum CodingKeys: String, CodingKey { case highlights = "destacados" }
        let highlights: [Media]
    }
}
