//
//  HomeViewController.swift
//  ott
//
//  Created by dpsmac1 on 24-04-18.
//  Copyright (c) 2018 Digitalproserver. All rights reserved.
//
//  This file was generated by the 🐍 VIPER generator
//

import UIKit
import BmoViewPager
import ParallaxHeader
import SideMenu

final class HomeViewController: UIViewController {
    // MARK: - Public properties -
    @IBOutlet weak var menuItem: UIBarButtonItem!
    @IBOutlet weak var tableView: UITableView!
    
    var presenter: HomePresenterInterface!
    
    
    var categories: [Category]? = [] {
        didSet {
            tableView.reloadData()
        }
    }
    

    static let parallaxHeight: CGFloat = 240.0
    
    var highlights: [Media]? = [] {
        didSet {
            guard highlights != nil, let count = highlights?.count, count > 0 else {
                    tableView.parallaxHeader.view = UIViewController().view
                    tableView.parallaxHeader.height = 0.0
                    return
            }
            
            tableView.parallaxHeader.view = pagerView
            tableView.parallaxHeader.height = HomeViewController.parallaxHeight
            tableView.parallaxHeader.mode = .topFill
            
            setupPageControl()
        }
    }
    
    
    
    
    // MARK: - Private properties -
    private let activityIndicator = UIActivityIndicatorView()
    fileprivate var activityIndicatorCount: Int = 0 { // Cuando es 0, se oculta
        didSet {
            if activityIndicatorCount != 0 {
                view.isUserInteractionEnabled = false
                activityIndicator.startAnimating()
            } else {
                activityIndicator.stopAnimating()
                view.isUserInteractionEnabled = true
            }
        }
    }
    
    lazy var pagerView: BmoViewPager = {
        let pv = BmoViewPager()
        pv.dataSource = self
        pv.delegate = self
        return pv
    }()
    
    lazy var pageControl: UIPageControl = {
        let pc = UIPageControl()
        pc.addTarget(self, action: #selector(pageControlDidChangePage(_:)), for: .valueChanged)
        pc.numberOfPages = 0
        return pc
    }()
    
    
    // MARK: - Lifecycle -
    
    override func viewDidLoad() {
        super.viewDidLoad()
        presenter.viewDidLoad()
        
        automaticallyAdjustsScrollViewInsets = false
        
        // MARK: Table view
        tableView.dataSource = self
        tableView.delegate = self
        categories = nil
        
        // MARK: Activity indicator
        activityIndicator.backgroundColor = UIColor.black.withAlphaComponent(0.6)
        activityIndicator.hidesWhenStopped = true
        activityIndicator.clipsToBounds = true
        activityIndicator.layer.cornerRadius = 8.0
        view.addSubview(activityIndicator)
    }
    
    override func viewDidLayoutSubviews() {
        super.viewDidLayoutSubviews()
        
        // MARK: Activity indicator
        activityIndicator.frame = CGRect(x: view.center.x - 30, y: view.center.y - 30, width: 60, height: 60)
        
        // MARK: Page control
        let pageControlHeight: CGFloat = 37.0
        pageControl.frame = CGRect(x: 0, y: HomeViewController.parallaxHeight - pageControlHeight, width: view.bounds.width, height: pageControlHeight)
    }
    
    @IBAction func toggleSideMenu() {
        presenter.showSideMenu()
    }
}

// MARK: - Extensions -

extension HomeViewController: HomeViewInterface {
    // MARK: Color theme
    var colorTheme: ColorTheme { return Themes.home }
    
    // MARK: Side menu
    func showSideMenu() {
        present(SideMenuManager.default.menuLeftNavigationController!, animated: true, completion: nil)
    }
    
    // MARK: Activity indicator
    func showLoadingIndicator() {
        activityIndicatorCount += 1
    }
    
    func hideLoadingIndicator() {
        activityIndicatorCount -= 1
    }
}




// MARK: - UITableView
extension HomeViewController: UITableViewDataSource {
    static let cellIdentifier = "HomeCategoryCell"
    
    
    // MARK: Cells
    func numberOfSections(in tableView: UITableView) -> Int {
        return 1
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return categories?.count ?? 0
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: HomeViewController.cellIdentifier, for: indexPath) as! HomeCategoryCell
        let category = categories?[indexPath.row]
        
        cell.delegate = self
        cell.section = UInt(indexPath.row)
        
        cell.sectionTitleLabel.text = category?.name
        cell.category = category
        
        return cell
    }
}

extension HomeViewController: UITableViewDelegate {
    static let navigationBarFinalColorWhenScrolling = UIColor(hexString: "#D32F2F")!

    func scrollViewDidScroll(_ scrollView: UIScrollView) {
        let maxScroll = HomeViewController.parallaxHeight

        let scroll = -scrollView.contentOffset.y
        let alpha = max(0.01, min(0.99, 1.0 - min(maxScroll, scroll)/maxScroll))

        let color = HomeViewController.navigationBarFinalColorWhenScrolling
        let image = UIImage.backgroundImage(color: color, alpha: alpha)
        
        navigationController?.navigationBar.setBackgroundImage(image, for: .default)
        navigationController?.navigationBar.shadowImage = image
    }
}




// MARK: - Home Cell Interactor
extension HomeViewController: HomeCellInteractor {
    func didSelectCell(section: UInt, row: UInt) {
        guard let cats = categories else {
            return
        }
        
        let category = cats[Int(section)]
        let items = category.items
        
        guard let media = items?[Int(row)] else {
            return
        }
        
        presenter.goToDetails(media: media)
    }
}




// MARK: - BmoViewPager
extension HomeViewController {
    func setupPageControl() {
        view.layoutIfNeeded()

        pagerView.addSubview(pageControl)
        pagerView.bringSubview(toFront: pageControl)
    }
}




extension HomeViewController: BmoViewPagerDataSource {
    func bmoViewPagerDataSourceNumberOfPage(in viewPager: BmoViewPager) -> Int {
        pageControl.numberOfPages = highlights!.count
        return highlights!.count
    }
    
    func bmoViewPagerDataSource(_ viewPager: BmoViewPager, viewControllerForPageAt page: Int) -> UIViewController {
        guard
            let vc = storyboard?.instantiateViewController(withIdentifier: "HomePagerSlideViewController") as? HomePagerSlideViewController,
            let media = highlights?[page] else {
                return UIViewController()
        }
        
        vc.delegate = presenter
        vc.media = media
        
        return vc
    }
}




extension HomeViewController: BmoViewPagerDelegate {
    func bmoViewPagerDelegate(_ viewPager: BmoViewPager, pageChanged page: Int) {
        pageControl.currentPage = page
    }
}








// MARK: - Page control
extension HomeViewController {
    @objc func pageControlDidChangePage(_ pageControl: UIPageControl) {
        pagerView.presentedPageIndex = pageControl.currentPage
    }
}
